import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c5c8a48b.js";const F=JSON.parse('{"title":"缓冲区拾取","description":"","frontmatter":{},"headers":[],"relativePath":"2023/webGPU学习/huan3chong1qu1shi2qu3.md","filePath":"2023/webGPU学习/huan3chong1qu1shi2qu3.md","lastUpdated":null}'),o={name:"2023/webGPU学习/huan3chong1qu1shi2qu3.md"},p=l(`<h1 id="缓冲区拾取" tabindex="-1">缓冲区拾取 <a class="header-anchor" href="#缓冲区拾取" aria-label="Permalink to &quot;缓冲区拾取&quot;">​</a></h1><p>缓冲区拾取的原理是：利用FBO（帧缓冲区）渲染另外一份顶点数据一样，但是顶点颜色是按照ID位计算成RGB值，这样就保证了每一个物体的色值都不一样，这样点击的时候获取点击位置的RGB值，再位换算回ID值就可以知道点击到哪个物体了。缓冲区拾取是用空间（多一份数据）换间（拾取快），另外由于缓冲区拾取不需要遍历模型，所以模型是可以做合模处理的。</p><h3 id="orillusion的帧缓冲拾取" tabindex="-1">orillusion的帧缓冲拾取 <a class="header-anchor" href="#orillusion的帧缓冲拾取" aria-label="Permalink to &quot;orillusion的帧缓冲拾取&quot;">​</a></h3><p>orillusion中</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 引擎启动前需要配置开启拾取和拾取类型</span></span>
<span class="line"><span style="color:#A6ACCD;">Engine3D</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">setting</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pick</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// bound: 包围盒拾取，pixel：帧缓冲拾取</span></span>
<span class="line"><span style="color:#A6ACCD;">Engine3D</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">setting</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pick</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">bound</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> Engine3D</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 拾取检测依赖 Collider 碰撞组件  Collider源码路径：src\\components\\ColliderComponent.ts</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object3D</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addComponent</span><span style="color:#A6ACCD;">(ColliderComponent)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="走一遍orillusion最简单的流程来看源码" tabindex="-1">走一遍orillusion最简单的流程来看源码 <a class="header-anchor" href="#走一遍orillusion最简单的流程来看源码" aria-label="Permalink to &quot;走一遍orillusion最简单的流程来看源码&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> Engine3D</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在Engine3D.init方法中，根据用户的配置初始化各种数据、判断设备是否支持webgpu并获取webgpu的设备对象和上下文</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 为canvas注册各种交互事件</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> scene3D</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Scene3D</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Scene3D</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> cameraObj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object3D</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object3D</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// addComponent方法会将Camera3D实例化，并返回实例化对象</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> camera </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cameraObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addComponent</span><span style="color:#A6ACCD;">(Camera3D)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 初始化透视投影</span></span>
<span class="line"><span style="color:#A6ACCD;">camera</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">perspective</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">60</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Engine3D</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">aspect</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5000.0</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">View3D</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scene </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> scene3D</span></span>
<span class="line"><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">camera </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> camera</span></span></code></pre></div><p>orillusion会在ComponentCollect这个类中进行各种类型的component收集： componentsBeforeUpdateList componentsComputeList componentsUpdateList componentsLateUpdateList</p>`,11),e=[p];function t(c,r,i,D,C,y){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
