import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c5c8a48b.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"2023/webgl学习/qian2yan2.md","filePath":"2023/webgl学习/qian2yan2.md","lastUpdated":null}'),o={name:"2023/webgl学习/qian2yan2.md"},e=l(`<p>webgl 水案例： <a href="https://github.com/evanw/webgl-water" target="_blank" rel="noreferrer">https://github.com/evanw/webgl-water</a></p><p>在实际开发中，不发生变化的代码可以说是不存在的。我们能够做的只有将这个变化造成的影响最小化——将变与不变分离，确保变化的部分灵活、不变的部分稳定。 这个过程，就叫&quot;封装变化&quot;，这样的代码，就是我们所谓的&quot;健壮&quot;的代码，它可以经得起变化的考验。而设计模式出现的意义，就是帮我们写出这样的代码。</p><p>cad的sdk的viewer和controller需要增加单例模式的限制，让它创建的时候始终是最开始new的实例对象</p><h2 id="判断设备是否支持webgl" tabindex="-1">判断设备是否支持webgl <a class="header-anchor" href="#判断设备是否支持webgl" aria-label="Permalink to &quot;判断设备是否支持webgl&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> canvas </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">canvas</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> gl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> canvas</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContext</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webgl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> canvas</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContext</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">experimental-webgl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (gl </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> gl </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebGLRenderingContext</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 浏览器支持 WebGL</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">设备支持webGl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 浏览器不支持 WebGL</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">设备不支持webGl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,5),p=[e];function t(c,r,D,y,F,i){return a(),n("div",null,p)}const u=s(o,[["render",t]]);export{C as __pageData,u as default};
