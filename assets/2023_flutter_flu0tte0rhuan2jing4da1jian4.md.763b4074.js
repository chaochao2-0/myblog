import{_ as s,o as a,c as e,V as o}from"./chunks/framework.c5c8a48b.js";const u=JSON.parse('{"title":"flutter入门学习","description":"","frontmatter":{},"headers":[],"relativePath":"2023/flutter/flu0tte0rhuan2jing4da1jian4.md","filePath":"2023/flutter/flu0tte0rhuan2jing4da1jian4.md","lastUpdated":null}'),l={name:"2023/flutter/flu0tte0rhuan2jing4da1jian4.md"},n=o(`<h1 id="flutter入门学习" tabindex="-1">flutter入门学习 <a class="header-anchor" href="#flutter入门学习" aria-label="Permalink to &quot;flutter入门学习&quot;">​</a></h1><h2 id="环境安装" tabindex="-1">环境安装 <a class="header-anchor" href="#环境安装" aria-label="Permalink to &quot;环境安装&quot;">​</a></h2><ul><li>windows和linux操作系统，只能搭建Android开发环境</li><li>如果需要同时搭建Android和IOS开发环境，请选择MacOS</li></ul><p>关于运行项目一直卡在<code>Running Gradle task &#39;assembleDebug&#39;...</code>的解决方法： <a href="https://juejin.cn/post/7243357900940378170?searchId=20230805001356ABCFDE5794FDC33C280B" target="_blank" rel="noreferrer">https://juejin.cn/post/7243357900940378170?searchId=20230805001356ABCFDE5794FDC33C280B</a> 第二次挂了梯子然后就没有卡住，虽然还是比较慢。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">maven </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://maven.aliyun.com/repository/central/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">maven </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://maven.aliyun.com/repository/public/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">maven </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://maven.aliyun.com/repository/google/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">maven </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://maven.aliyun.com/repository/gradle-plugin/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="flutter的包管理工具pub" tabindex="-1">flutter的包管理工具pub <a class="header-anchor" href="#flutter的包管理工具pub" aria-label="Permalink to &quot;flutter的包管理工具pub&quot;">​</a></h2><p>Dart提供了包管理工具<code>Pub</code>，用来管理代码和资源。与<code>Android</code>中的<code>JCenter/Maven</code>、ios中的<code>CocoaPods</code>、前端中的<code>npm</code>库类似。对应的依赖管理文件是<code>pubspace.yaml</code><a href="https://pub-web.flutter-io.cn/" target="_blank" rel="noreferrer">https://pub-web.flutter-io.cn/</a></p><h2 id="mac-mini环境配置" tabindex="-1">mac mini环境配置 <a class="header-anchor" href="#mac-mini环境配置" aria-label="Permalink to &quot;mac mini环境配置&quot;">​</a></h2><ol><li>下载Android Studio 官网下载：<a href="https://developer.android.com/studio?hl=zh-cn" target="_blank" rel="noreferrer">https://developer.android.com/studio?hl=zh-cn</a>, 下载的时候要关闭代理 选择<code>Mac with Apple chip</code>版本</li><li>安装好<code>Android Studio</code>后，打开，在<code>Plugins</code>中安装<code>flutter</code>插件</li><li>下载<code>flutter sdk</code>: <a href="https://docs.flutter.dev/get-started/install/macos" target="_blank" rel="noreferrer">https://docs.flutter.dev/get-started/install/macos</a>, 选择<code>Apple Silicon</code>版本下载</li><li>将下载好的<code>flutter sdk</code>解压缩，用<code>Android Studio</code>新建一个flutter项目，导入刚才下载好的<code>flutter sdk</code>即可创建和运行项目</li></ol><h2 id="vscode如何配置环境" tabindex="-1">vscode如何配置环境 <a class="header-anchor" href="#vscode如何配置环境" aria-label="Permalink to &quot;vscode如何配置环境&quot;">​</a></h2><ol><li>安装<code>flutter</code>插件</li><li><code>command + shift + p</code>调出输命令框，输入<code>flutter</code>,随后选择新建项目运行即可</li><li>设备选择<code>chrome</code>，然后<code>debugging</code>调试</li></ol><h2 id="如何用xcode运行flutter项目" tabindex="-1">如何用xcode运行flutter项目 <a class="header-anchor" href="#如何用xcode运行flutter项目" aria-label="Permalink to &quot;如何用xcode运行flutter项目&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 用xcode打开项目</span></span>
<span class="line"><span style="color:#A6ACCD;">open </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">a Xcode ios</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">Runner</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xcworkspace</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 用xcode打开项目，给项目选择一个team</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 但是运行却一直报错,而直接使用Android Studio打开却不会报错，可以正常真机调试</span></span>
<span class="line"><span style="color:#A6ACCD;">Command PhaseScriptExecution failed </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> a nonzero exit code</span></span></code></pre></div><h2 id="mac-mini-配置环境变量" tabindex="-1">mac mini 配置环境变量 <a class="header-anchor" href="#mac-mini-配置环境变量" aria-label="Permalink to &quot;mac mini 配置环境变量&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 打开环境变量配置文件</span></span>
<span class="line"><span style="color:#A6ACCD;">open </span><span style="color:#89DDFF;">~/.</span><span style="color:#A6ACCD;">bash_profile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 添加flutter的安装路径到环境变量 Users/chaochao/Documents/flutter/flutter/bin是flutter安装路径</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> PATH</span><span style="color:#89DDFF;">=/</span><span style="color:#A6ACCD;">Users</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">chaochao</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">Documents</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">flutter</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">flutter</span><span style="color:#89DDFF;">/</span><span style="color:#FFCB6B;">bin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">$PATH</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> PATH</span><span style="color:#89DDFF;">=/</span><span style="color:#A6ACCD;">Users</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">chaochao</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">Documents</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">flutter</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">flutter</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">bin</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">cache</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">dart</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">sdk</span><span style="color:#89DDFF;">/</span><span style="color:#FFCB6B;">bin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">$PATH</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> PUB_HOSTED_URL</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//pub.flutter-io.cn</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> FLUTTER_STORAGE_BASE_URL</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//storage.flutter-io.cn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 更新配置文件</span></span>
<span class="line"><span style="color:#A6ACCD;">source </span><span style="color:#89DDFF;">~/.</span><span style="color:#A6ACCD;">bash_profile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取依赖</span></span>
<span class="line"><span style="color:#A6ACCD;">flutter packages get</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 依赖安装好以后如果是ios真机测试还需要用xcode打开项目下的ios项目，给项目分配一个开发team，不然打包不了</span></span></code></pre></div><h2 id="fvm切换flutter版本" tabindex="-1">fvm切换flutter版本 <a class="header-anchor" href="#fvm切换flutter版本" aria-label="Permalink to &quot;fvm切换flutter版本&quot;">​</a></h2><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 添加homebrew tap</span></span>
<span class="line"><span style="color:#A6ACCD;">brew tap leoafarias</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">fvm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 安装 fvm</span></span>
<span class="line"><span style="color:#A6ACCD;">brew install fvm</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 查看fvm的版本</span></span>
<span class="line"><span style="color:#A6ACCD;">fvm </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">version</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 安装flutter版本</span></span>
<span class="line"><span style="color:#A6ACCD;">fvm install </span><span style="color:#F78C6C;">3.10</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 查看安装列表</span></span>
<span class="line"><span style="color:#A6ACCD;">fvm list</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 切换flutter版本</span></span>
<span class="line"><span style="color:#A6ACCD;">fvm use </span><span style="color:#F78C6C;">3.10</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">local</span></span></code></pre></div><p><a href="https://juejin.cn/post/6939712499465846798?searchId=20231101165324A5F32542D249556280AC" target="_blank" rel="noreferrer">https://juejin.cn/post/6939712499465846798?searchId=20231101165324A5F32542D249556280AC</a></p><p>先确认flutter和dart是否能够做AR sdk的这个事情 如果能够做，sdk如何发包？如何维护？ flutter如何打包成各种版本的app，如何上架？</p><p>AR的画面是视频流还是像webgl一样，用ios的调用gpu的方法实现？ 如果AR的画面是调用gpu实现的,flutter是否可以实现？</p><h2 id="impeller" tabindex="-1">Impeller <a class="header-anchor" href="#impeller" aria-label="Permalink to &quot;Impeller&quot;">​</a></h2><p><code>Impeller</code>是<code>Flutter</code>团队自研的渲染引擎，它的最终目标是在<code>Flutter</code>中取代当前的渲染引擎<code>Skia</code>。 <code>Impeller</code>的出现是<code>Flutter</code>团队用以彻底解决<code>SkSL(Skia Shading Language)</code>引入的<code>Jank</code>问题所做的重要尝试。</p><p>背景：<code>SkSL</code>引入的卡顿问题： <code>Skia</code>在第一次使用某个着色器时，需要动态生成对应的着色器代码并对其进行编译(着色器代码可以简单理解为一段跑在GPU上的代码)。这个过程可能会非常耗时，有时候会有几十甚至上百毫秒的一个耗时。</p><p><code>Impeller shader</code>的离线编译： 与<code>Skia</code>不同的是，<code>Impeller</code>中的<code>shader</code>并不需要在运行时动态生成，而是提前写好，并通过离线编译的方式打到引擎之中的。</p><p><code>Impeller</code>中的<code>shader</code>是使用<code>GLSL 4.60</code>写的。而我们知道<code>Metal</code>后端需要的<code>shader</code>语言是<code>MSL(Metal shading language)</code>,那么<code>Impeller</code>是如何做到将<code>GLSL4.60</code>转换成<code>MSL</code>的呢？ 在引擎编译阶段，<code>ImpellerC</code>会借助<code>ShaderC</code>，将<code>GLSL</code>转换为<code>SPIR-V Assembly</code>。然后再借助<code>SPIR-V Cross</code>将<code>SPIR-V Assembly</code>反汇编为<code>SPIR-V IR</code>，并根据<code>SPIR-V IR</code>生成相应的<code>MSL</code>源码，最终将<code>MSL</code>编译链接得到<code>Metal Library</code>并将其打包到<code>engine</code>当中。 同时，<code>ImpellerC</code>中的<code>Refector</code>根据<code>SPIR-V IR</code>中的数据，根据不同的后端，生成对应的<code>c++</code>文件，用于绑定数据等。</p><h2 id="happinessx" tabindex="-1">HappinessX <a class="header-anchor" href="#happinessx" aria-label="Permalink to &quot;HappinessX&quot;">​</a></h2><p>核心组成是<code>Flutter Plugin + AS</code>插件，它提供了一套基于<code>GetX</code>极致简洁高效的<code>Flutter</code>业务开发范式，以及针对混合工程的提效工具。配套的<code>AS</code>插件帮助建立开发规范和进一步提高开发效率。</p><p>Json2Dart GetX使用和插件：<a href="https://juejin.cn/post/6924104248275763208?searchId=202310180953376667B7DB9CBFC16C956B" target="_blank" rel="noreferrer">https://juejin.cn/post/6924104248275763208?searchId=202310180953376667B7DB9CBFC16C956B</a></p><h2 id="skia" tabindex="-1">Skia <a class="header-anchor" href="#skia" aria-label="Permalink to &quot;Skia&quot;">​</a></h2><p>在<code>chrome</code>浏览器中，<code>Skia</code>是<code>Blink</code>渲染引擎的一部分，<code>Blink</code>渲染引擎是<code>Google</code>开发的一种基于<code>WebKit</code>的渲染引擎，用于处理<code>HTML</code>、<code>CSS</code>和<code>JavaScript</code>的渲染。<code>Blink</code>渲染引擎使用<code>Skia</code>来处理所有的2D图形操作，以提高网页的渲染性能。</p><p><code>chrome</code>显示一个页面，也是通过<code>CPU</code>和<code>GPU</code>共同处理显示出来的。而<code>WebGL</code>这样的技术让开发者可以直接自己操作<code>GPU</code>进行绘制。</p>`,31),t=[n];function p(c,r,d,i,y,D){return a(),e("div",null,t)}const h=s(l,[["render",p]]);export{u as __pageData,h as default};
