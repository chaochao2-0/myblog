import{_ as s,o,c as a,V as n}from"./chunks/framework.c5c8a48b.js";const F=JSON.parse('{"title":"Monorepo学习","description":"","frontmatter":{},"headers":[],"relativePath":"2023/Mo0n0o0re0po0xue2xi2.md","filePath":"2023/Mo0n0o0re0po0xue2xi2.md","lastUpdated":null}'),e={name:"2023/Mo0n0o0re0po0xue2xi2.md"},p=n(`<h1 id="monorepo学习" tabindex="-1">Monorepo学习 <a class="header-anchor" href="#monorepo学习" aria-label="Permalink to &quot;Monorepo学习&quot;">​</a></h1><p>最近看了一点<code>vue3</code>和<code>element-plus</code>的源码，看到他们都已经用了<code>pnpm+Monorepo</code>。我悟了，这又是一个必须要学的东西。那么，就来浅浅的尝试一下，实现一个<code>vue3的项目(demo1)</code>，引入同样独立的<code>demo2</code>和<code>demo3</code>模块，三个包共用<code>vue3</code>、<code>element-plus</code>和<code>typescript</code>依赖，同时<code>demo2</code>有自己独立的依赖<code>ts-node</code>来运行自己的测试代码。</p><h2 id="安装pnpm" tabindex="-1">安装pnpm <a class="header-anchor" href="#安装pnpm" aria-label="Permalink to &quot;安装pnpm&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span></span></code></pre></div><h2 id="项目结构搭建" tabindex="-1">项目结构搭建 <a class="header-anchor" href="#项目结构搭建" aria-label="Permalink to &quot;项目结构搭建&quot;">​</a></h2><p>新建一个文件夹，就叫<code>Monorepo-demo</code>，用编辑器打开文件夹，新建<code>pnpm-workspace.yaml</code>文件</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">packages:</span></span>
<span class="line"><span style="color:#A6ACCD;">  - &#39;packages</span><span style="color:#676E95;font-style:italic;">/*&#39;</span></span></code></pre></div><p>在<code>Monorepo-demo</code>下新建packages文件夹，文件夹下新建<code>demo1(vue项目文件夹)</code>、<code>demo2</code>、<code>demo3</code>三个文件夹 并在各级目录下执行<code>npm init -y</code>创建包，生成对应的<code>package.json</code>文件。</p><h2 id="安装公共的vue、element-plus和typescript依赖" tabindex="-1">安装公共的Vue、Element-plus和typescript依赖 <a class="header-anchor" href="#安装公共的vue、element-plus和typescript依赖" aria-label="Permalink to &quot;安装公共的Vue、Element-plus和typescript依赖&quot;">​</a></h2><p><code>-w</code>表示将依赖安装到公共模块中</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">element-plus</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">typescript</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-w</span></span></code></pre></div><h2 id="demo1中创建vue3项目" tabindex="-1">demo1中创建vue3项目 <a class="header-anchor" href="#demo1中创建vue3项目" aria-label="Permalink to &quot;demo1中创建vue3项目&quot;">​</a></h2><p>这里我用的是官方脚手架创建<code>vue</code>项目，创建完以后将项目文件移动到<code>demo1</code>文件夹下，调整<code>package.json</code>中的配置，去掉<code>vue</code>、<code>typescript</code>在<code>demo1</code>中的依赖配置，然后去外层执行命令<code>pnpm install</code>安装依赖。 这时<code>demo1</code>中的依赖就安装好了，在<code>demo1</code>中打开终端运行代码，能够成功运行。证明外层的公共模块依赖正常生效了。</p><h2 id="demo2、demo3中提供一些封装好的逻辑" tabindex="-1">demo2、demo3中提供一些封装好的逻辑 <a class="header-anchor" href="#demo2、demo3中提供一些封装好的逻辑" aria-label="Permalink to &quot;demo2、demo3中提供一些封装好的逻辑&quot;">​</a></h2><p>这里我直接在<code>demo2</code>下新建<code>index.ts</code>文件提供一个<code>Demo2</code>的类，代码如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// index.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Demo2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">helloWorld</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World ! Demo2:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>新建<code>test.ts</code>运行测试</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// test.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Demo2 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./index</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> test </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo2</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">chaochao</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">test</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">helloWorld</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p><code>demo2</code>中安装自己的独立依赖<code>ts-node</code>，在<code>package.json</code>中配置测试命令：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ts-node</span></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts-node test.ts</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span></code></pre></div><p>随后在demo2中打开终端执行<code>npm run test</code>，运行成功，证明<code>Demo2</code>中能共用<code>typescript</code>依赖且自己独立安装的<code>ts-node</code>生效。</p><p><code>demo3</code>的代码和<code>demo2</code>大体一致，只修改了打印信息，不安装<code>ts-node</code>依赖，这里不再赘述。</p><h2 id="在vue3项目中安装demo2、demo3作为依赖" tabindex="-1">在vue3项目中安装demo2、demo3作为依赖 <a class="header-anchor" href="#在vue3项目中安装demo2、demo3作为依赖" aria-label="Permalink to &quot;在vue3项目中安装demo2、demo3作为依赖&quot;">​</a></h2><p>这里的<code>demo2</code>、<code>demo3</code>是根据具体<code>package.json</code>下的包名来定，我这里是<code>demo2</code>、<code>demo3</code></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">demo2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">demo3</span></span></code></pre></div><p>然后就可以看到依赖的安装情况：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">demo2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workspace:^</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">demo3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workspace:^</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span></code></pre></div><p>然后在<code>vue</code>项目中的<code>App.vue</code>中测试一下依赖安装情况：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Demo2 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">demo2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Demo3 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">demo3</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> test2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo2</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">chaochao</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">test2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">helloWorld</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> test3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Demo3</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xiaohua</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">test3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wakk</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p>运行项目，发现依赖正常引入，能正常打印出需要的日志信息。随后我又测试了一下修改demo2中的打印日志，vue的项目中第一时间就更新了过去，至此，Monorepo的demo项目完成。</p><h2 id="在外层的package-json中配置命令启动packages文件夹下面的项目" tabindex="-1">在外层的package.json中配置命令启动packages文件夹下面的项目 <a class="header-anchor" href="#在外层的package-json中配置命令启动packages文件夹下面的项目" aria-label="Permalink to &quot;在外层的package.json中配置命令启动packages文件夹下面的项目&quot;">​</a></h2><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pnpm -C ./packages/demo1 dev</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span></code></pre></div><p>这样我就不需要每次启动项目都跑到demo1下面启动我的vue项目了，可以直接在项目根目录下启动vue项目。</p><h2 id="npm-run-all来串行-并行执行命令" tabindex="-1">npm-run-all来串行/并行执行命令 <a class="header-anchor" href="#npm-run-all来串行-并行执行命令" aria-label="Permalink to &quot;npm-run-all来串行/并行执行命令&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm-run-all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-w</span></span></code></pre></div><p><code>npm-run-all</code>提供三个命令，分别是<code>npm-run-all</code>、<code>run-s</code>、<code>run-p</code>，后两个是<code>npm-run-all</code>带参数的简写，分别对应串行和并行。 这里一起来看一下<code>element-plus</code>的命令配置：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">typecheck</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">run-p typecheck:web typecheck:play typecheck:node typecheck:vite-config typecheck:vitest</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">typecheck:web</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-tsc -p tsconfig.web.json --composite false --noEmit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">typecheck:node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tsc -p tsconfig.node.json --noEmit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">typecheck:play</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-tsc -p tsconfig.play.json --composite false --noEmit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">typecheck:vite-config</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-tsc -p tsconfig.vite-config.json --composite false --noEmit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">typecheck:vitest</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-tsc -p tsconfig.vitest.json --composite false --noEmit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span></code></pre></div><p><code>vue-tsc</code>是基于<code>Volar</code>的<code>vue3</code>类型检查工具，执行<code>vue-tsc --noEmit</code>时使用命令行参数<code>--project（或-p）</code>指定配置文件进行类型检查。<code>--composite false</code>不进行增量编译，增量编译指的是生成 <code>.d.ts</code> 和 <code>tsconfig.tsbuildinfo</code> 文件，使用 <code>vue-tsc</code> 法语检查时不能设置为<code>true</code>。 这里<code>element-plus</code>的配置命令，配置下面五个类型检查命令分别进行对应模块的类型检查，最后配置一个<code>typecheck</code>命令，并行对所有模块类型进行检查。</p><h2 id="学习参考链接" tabindex="-1">学习参考链接 <a class="header-anchor" href="#学习参考链接" aria-label="Permalink to &quot;学习参考链接&quot;">​</a></h2><p>Monorepo学习、typescript配置、串行/并行执行脚本、npm-run-all：<a href="https://juejin.cn/post/7146183222425518093?searchId=20230726141301208A558690115E13CC04#heading-14" target="_blank" rel="noreferrer">https://juejin.cn/post/7146183222425518093?searchId=20230726141301208A558690115E13CC04#heading-14</a></p>`,41),l=[p];function t(c,r,D,y,d,i){return o(),a("div",null,l)}const A=s(e,[["render",t]]);export{F as __pageData,A as default};
