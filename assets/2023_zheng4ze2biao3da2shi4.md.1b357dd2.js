import{_ as s,o as a,c as l,V as o}from"./chunks/framework.c5c8a48b.js";const F=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{},"headers":[],"relativePath":"2023/zheng4ze2biao3da2shi4.md","filePath":"2023/zheng4ze2biao3da2shi4.md","lastUpdated":null}'),n={name:"2023/zheng4ze2biao3da2shi4.md"},p=o(`<h1 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h1><h2 id="判断网站url是否正确" tabindex="-1">判断网站url是否正确 <a class="header-anchor" href="#判断网站url是否正确" aria-label="Permalink to &quot;判断网站url是否正确&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> urlPattern </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegExp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">(?:</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">s</span><span style="color:#89DDFF;">)?</span><span style="color:#C3E88D;">:</span><span style="color:#A6ACCD;">\\/\\/</span><span style="color:#89DDFF;">)?[</span><span style="color:#C3E88D;">\\w.-</span><span style="color:#89DDFF;">]+(?:</span><span style="color:#A6ACCD;">\\.</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">\\w</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">]+)+[</span><span style="color:#C3E88D;">\\w\\-</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">_~:/?#[</span><span style="color:#A6ACCD;">\\]</span><span style="color:#C3E88D;">@!</span><span style="color:#A6ACCD;">\\$</span><span style="color:#C3E88D;">&amp;&#39;</span><span style="color:#A6ACCD;">\\*\\+</span><span style="color:#C3E88D;">,;=.</span><span style="color:#89DDFF;">]+</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(urlPattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">www.examplle.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span></code></pre></div><ul><li>^ 表示匹配字符串的开始。</li><li>(?:http(s)?://)? 是一个可选的子模式，用于匹配以 &quot;http://&quot; 或 &quot;https://&quot; 开头的 URL。问号（?）表示前面的字符可选，冒号（:/）是用于匹配 &quot;:&quot; 和 &quot;/&quot; 字符的转义序列。</li><li>[\\w.-]+ 匹配由字母、数字、下划线、点和短横线组成的域名部分。方括号（[]）内的字符集表示可以匹配这些字符中的任何一个。加号（+）表示前面的字符可以重复一次或多次。</li><li>(?:.[\\w.-]+)+ 匹配顶级域名部分，由点（.）、字母、数字、下划线和短横线组成。星号（*）表示前面的字符可以重复零次或多次。</li><li>[\\w-._~:/?#[]@!$&amp;&#39;*+,;=.]+ 匹配 URL 的路径部分，包括斜线、字母、数字、下划线、点、短横线、波浪线、冒号、问号、井字号、中括号、大括号、感叹号、美元符号、百分号、单引号、双引号、星号、加号、逗号、分号和等号等字符。方括号（[]）内的字符集表示可以匹配这些字符中的任何一个。加号（+）表示前面的字符可以重复一次或多次。</li><li>$ 表示匹配字符串的结束。</li></ul>`,4),t=[p];function e(r,c,D,i,y,C){return a(),l("div",null,t)}const h=s(n,[["render",e]]);export{F as __pageData,h as default};
