import{_ as t,o as e,c as s,V as a}from"./chunks/framework.c5c8a48b.js";const F=JSON.parse('{"title":"ESlint和Prettier的比较","description":"","frontmatter":{},"headers":[],"relativePath":"2023/ESli0n0the2Pre0tti0e0rde0bi3jiao4.md","filePath":"2023/ESli0n0the2Pre0tti0e0rde0bi3jiao4.md","lastUpdated":null}'),n={name:"2023/ESli0n0the2Pre0tti0e0rde0bi3jiao4.md"},l=a(`<h1 id="eslint和prettier的比较" tabindex="-1">ESlint和Prettier的比较 <a class="header-anchor" href="#eslint和prettier的比较" aria-label="Permalink to &quot;ESlint和Prettier的比较&quot;">​</a></h1><ul><li>只单纯使用Prettier十分合理，开箱即用是个很棒的功能</li><li>如果你需要使用ESlint，它也可以像Prettier一样格式化代码，并且更加可配置</li><li>Prettier + ESlint仍然需要大量的配置，它并没有让你的生活变得更简单</li><li>你可以在ESlint中完全控制代码风格，但在Prettier中却无法做到，这两者混合在一起感觉很奇怪</li><li>我不认为Parse两次代码会更快 ESlint的自动修复也可以像Prettier一样进行格式化，还有更自由的选择</li></ul><h3 id="替代方案" tabindex="-1">替代方案 <a class="header-anchor" href="#替代方案" aria-label="Permalink to &quot;替代方案&quot;">​</a></h3><p>ESlint对确保代码质量来说不可或缺。如果ESlint已经能够进行代码格式化，那么对我来说最好的解决方案就是一次性都有它处理。 我花了一些时间配置我的ESlint并将其设置为预设配置:<a href="https://github.com/antfu/eslint-config" target="_blank" rel="noreferrer">@antfu/eslint-config</a> 从结果来看，使用ESlint其实也可以非常简单：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm i </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">D </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">antfu</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">eslint</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">config</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// .eslintrc</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@antfu</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这样就可以了。配合IDE扩展，还可以在保存时触发自动修复。它的工作方式与Prettier类似，但当你要换行的时候尊重你的选择，并提供了许多lint的最佳实践。哦！当然，这是基于我自己的需求的另一种&quot;固执己见的&quot;配置，但或许它可以成为一份很好的参考，方便你创建属于你自己的配置。</p><p>以上Prettier和ESlint的观点来自：<a href="https://antfu.me/posts/why-not-prettier-zh%EF%BC%8C%E6%88%91%E4%B8%80%E7%9B%B4%E5%9C%A8%E4%BD%BF%E7%94%A8Prettier%EF%BC%8CESlint%E7%94%A8%E7%9A%84%E5%85%B6%E5%AE%9E%E5%BE%88%E5%B0%91%EF%BC%8C%E4%B9%9F%E5%AF%B9ESlint%E4%B8%8D%E5%A4%9F%E4%BA%86%E8%A7%A3%EF%BC%8C%E4%BD%86%E6%88%91%E7%A1%AE%E5%AE%9E%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E6%84%9F%E5%8F%97%E5%88%B0%E4%BA%86Prettier%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B1%80%E9%99%90%E6%80%A7%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E6%96%87%E4%B8%AD%E6%89%80%E8%AF%B4%E7%9A%84Prettier%E7%9A%84%22%E5%9B%BA%E6%89%A7%E5%B7%B1%E8%A7%81%22%E3%80%82%E6%9C%89%E6%97%B6%E9%97%B4%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%E4%B8%80%E4%B8%8B%E4%BB%96%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9D%A5%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84ESlint%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E3%80%82" target="_blank" rel="noreferrer">https://antfu.me/posts/why-not-prettier-zh，我一直在使用Prettier，ESlint用的其实很少，也对ESlint不够了解，但我确实在工作中感受到了Prettier的一些局限性，也就是文中所说的Prettier的&quot;固执己见&quot;。有时间可以参考一下他的实现来配置自己的ESlint最佳实践。</a></p>`,8),r=[l];function E(i,o,p,c,B,A){return e(),s("div",null,r)}const d=t(n,[["render",E]]);export{F as __pageData,d as default};
