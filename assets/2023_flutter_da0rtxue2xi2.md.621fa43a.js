import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c5c8a48b.js";const F=JSON.parse('{"title":"dart学习","description":"","frontmatter":{},"headers":[],"relativePath":"2023/flutter/da0rtxue2xi2.md","filePath":"2023/flutter/da0rtxue2xi2.md","lastUpdated":null}'),o={name:"2023/flutter/da0rtxue2xi2.md"},p=l(`<h1 id="dart学习" tabindex="-1">dart学习 <a class="header-anchor" href="#dart学习" aria-label="Permalink to &quot;dart学习&quot;">​</a></h1><p><code>dart</code>语句后面必须带<code>;</code> 可以在<code>flutter</code>项目中的<code>test</code>文件夹中编辑代码做测试。</p><h2 id="定义变量的关键字" tabindex="-1">定义变量的关键字 <a class="header-anchor" href="#定义变量的关键字" aria-label="Permalink to &quot;定义变量的关键字&quot;">​</a></h2><p>普通变量：<code>var</code>、常量：<code>const</code>、<code>final</code><code>final</code>关键字声明的常量只能赋值一次且声明时可以不用赋值。<code>final</code>不仅有<code>const</code>的编译时常量的特性，最重要的它是运行时常量，并且<code>final</code>是惰性初始化，即：在运行时第一次使用前才初始化。</p><h2 id="基础数据类型" tabindex="-1">基础数据类型 <a class="header-anchor" href="#基础数据类型" aria-label="Permalink to &quot;基础数据类型&quot;">​</a></h2><p><code>int</code> <code>double</code> <code>String</code> <code>bool</code></p><h2 id="变量名-在字符串中插入变量值" tabindex="-1">$变量名 在字符串中插入变量值 <a class="header-anchor" href="#变量名-在字符串中插入变量值" aria-label="Permalink to &quot;$变量名 在字符串中插入变量值&quot;">​</a></h2><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// $变量名: 在字符串中插入变量值</span></span>
<span class="line"><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;a的值是:$</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#C3E88D;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// \${}来嵌入表达式</span></span>
<span class="line"><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;a的值是:\${</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#C3E88D;"> + </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">}&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><p>运算符 if else、switch、for、while、do while等流程控制语句的使用方法和js中基本一致</p><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 函数名前是函数的返回值</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getName</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;测试&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;名字:$</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#C3E88D;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h3 id="命名参数" tabindex="-1">命名参数 <a class="header-anchor" href="#命名参数" aria-label="Permalink to &quot;命名参数&quot;">​</a></h3><p><code>dart</code>中支持命名参数，可以通过参数的名称来传参，不需要在意入参的顺序。通过<code>{}</code>包裹命名的参数，其中<code>required</code>关键字表示该入参必须传入；另外，可以用<code>=</code>提供参数的默认值，使用者在调用时可以选填</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">printData</span><span style="color:#A6ACCD;">({</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">required</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 必传参数不需要给默认值</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 选填参数必须给默认值</span></span>
<span class="line"><span style="color:#A6ACCD;">}) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;名字:$</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#C3E88D;">; 年龄:$</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#C3E88D;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">printData</span><span style="color:#A6ACCD;">(name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;zhangsan&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="位置参数" tabindex="-1">位置参数 <a class="header-anchor" href="#位置参数" aria-label="Permalink to &quot;位置参数&quot;">​</a></h3><p>方括号<code>[]</code>包围参数列表，位置参数可以给默认值，函数参数必须按照参数顺序传入。 它和普通函数列表的区别在于：在调用时，可以省略若干个参数，省略的参数使用默认值。</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">printData</span><span style="color:#A6ACCD;">([</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;lisi&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;名字:$</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#C3E88D;">; 年龄:$</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#C3E88D;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">printData</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;zhangsan&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="class类" tabindex="-1">class类 <a class="header-anchor" href="#class类" aria-label="Permalink to &quot;class类&quot;">​</a></h2><ul><li><code>class</code>中的成员属性必须给个默认值</li><li>构造函数的函数名和类名相同</li><li>在构造函数中，通过<code>this</code>对象进行赋值的操作，可以进行简化书写</li></ul><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Human(String name, int age) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//   this.name = name;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//   this.age = age;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Human</span><span style="color:#A6ACCD;">(this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h3><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Human</span><span style="color:#A6ACCD;">(this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> school</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// super.name: 在入参中为父类中的成员赋值</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;">(super</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> super</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">school)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">info</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;\${</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#C3E88D;">}, \${</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#C3E88D;">}&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 类的成员函数访问自身属性可以省略this</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;"> stu </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;zhangsan&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;湖南科技学院&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">stu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="子类覆写父类方法" tabindex="-1">子类覆写父类方法 <a class="header-anchor" href="#子类覆写父类方法" aria-label="Permalink to &quot;子类覆写父类方法&quot;">​</a></h3><p>当子类中存在和父类同名的方法时，子类中的方法就会覆写父类中的方法。 在对象调用方法时，会优先使用子类方法，子类没有该方法时，才会触发父类方法。 一般子类覆写方法时，加<code>@override</code>注解进行示意。</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Human</span><span style="color:#A6ACCD;">(this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">info</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;\${</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#C3E88D;">}, \${</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#C3E88D;">}&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> school</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;">(super</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> super</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">school)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">@override</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">info</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    super</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 在子类中可以通过super调用父类中的方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;\${</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#C3E88D;">}, \${</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#C3E88D;">}, \${</span><span style="color:#A6ACCD;font-style:italic;">school</span><span style="color:#C3E88D;">}&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;"> stu </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Student</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;zhangsan&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;湖南科技学院&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">stu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="聚合类型" tabindex="-1">聚合类型 <a class="header-anchor" href="#聚合类型" aria-label="Permalink to &quot;聚合类型&quot;">​</a></h2><p>在日常生活中，有一类数据总是批量呈现的，这样的数据称为：聚合类型或容器类型。 在<code>dart</code>中，有三个最常用的聚合类型：列表<code>List</code>、映射<code>Map</code>和集合<code>Set</code></p><h2 id="列表list" tabindex="-1">列表List <a class="header-anchor" href="#列表list" aria-label="Permalink to &quot;列表List&quot;">​</a></h2><p>列表类型中可以盛放若干个同类型的对象，并且允许重复。在声明列表对象时，其中盛放的对象类型放在<code>&lt;&gt;</code>中，称之为泛型。</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 定义int泛型的列表，列表中只能盛放整数数据</span></span>
<span class="line"><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;">&gt; numList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 可以通过索引获取列表中的数据</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(numList[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// List中的常用方法:</span></span>
<span class="line"><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;">&gt; numList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">numList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 在末尾添加一个元素  [1, 2, 3, 4, 5, 6]</span></span>
<span class="line"><span style="color:#A6ACCD;">numList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 在指定索引处插入一个元素，比如这里在索引1处插入一个9  [1, 9, 2, 3, 4, 5, 6]</span></span>
<span class="line"><span style="color:#A6ACCD;">numList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 移除某个元素值，这里将1移除了  [9, 2, 3, 4, 5, 6]</span></span>
<span class="line"><span style="color:#A6ACCD;">numList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeAt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 移除指定索引处的元素  [9, 3, 4, 5, 6]</span></span>
<span class="line"><span style="color:#A6ACCD;">numList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeLast</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 移除最后元素  [9, 3, 4, 5]</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(numList)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// List遍历方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// for循环遍历</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> numList</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> numList[i]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;索引$</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#C3E88D;">, 元素值$</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#C3E88D;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// for in遍历:没有索引信息</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> numList) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;元素值:$</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#C3E88D;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// dart:core库中List.generate的用法：</span></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">generate</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> (index) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> index )</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">List</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">generate</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> (index) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;index:$</span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#C3E88D;">&#39;</span><span style="color:#A6ACCD;"> )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [index:0, index:1, index:2, index:3, index:4, index:5, index:6, index:7, index:8, index:9]</span></span></code></pre></div><h2 id="集合set" tabindex="-1">集合Set <a class="header-anchor" href="#集合set" aria-label="Permalink to &quot;集合Set&quot;">​</a></h2><p><code>Set</code>类型可以盛放若干个同类型的对象，它最大的区别是：不允许重复。</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#FFCB6B;">Set</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;">&gt; numSet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(numSet)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 自动合并重复元素：{1, 2, 3}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 集合本身是没有索引概念的，所以无法通过索引来访问和修改元素，因为集合本身在数学上的概念就是无序的。</span></span>
<span class="line"><span style="color:#A6ACCD;">numSet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 通过add方法添加元素: {1, 2, 3, 4}</span></span>
<span class="line"><span style="color:#A6ACCD;">numSet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 通过remove方法移除元素: {2, 3, 4}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 集合最重要的特征是可以进行集合间的运算，这点List是无法做到的。</span></span>
<span class="line"><span style="color:#FFCB6B;">Set</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;">&gt; a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Set</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;">&gt; b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">difference</span><span style="color:#A6ACCD;">(b))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 差集 {4}</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">union</span><span style="color:#A6ACCD;">(b))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// 并集 {1, 9, 4, 3}</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">intersection</span><span style="color:#A6ACCD;">(b))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 交集 {1, 9}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 遍历: 因为集合没有索引，索引只能使用for in遍历</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> a){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;元素值:$</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#C3E88D;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="映射map" tabindex="-1">映射Map <a class="header-anchor" href="#映射map" aria-label="Permalink to &quot;映射Map&quot;">​</a></h2><p><code>Map</code>是维护若干个键值对的数据类型。 映射中的一个元素记录着两个对象，所以<code>Map</code>类型有两个泛型，分别表示<code>key</code>的类型和<code>value</code>的类型。</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Map</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">&gt; numMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;zero&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;one&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">numMap[</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;three&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 通过 [key] = value添加元素</span></span>
<span class="line"><span style="color:#A6ACCD;">numMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// remove方法根据key移除元素  {1: one, 3: three}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// forEach遍历</span></span>
<span class="line"><span style="color:#A6ACCD;">numMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">((key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;key:$</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#C3E88D;">, value:$</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#C3E88D;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="空安全" tabindex="-1">空安全 <a class="header-anchor" href="#空安全" aria-label="Permalink to &quot;空安全&quot;">​</a></h2><p><code>dart</code>是一个空安全的语言，也就是说：你无法将一个非空类型对象的值设为<code>null</code> 如果希望对象可以赋值为<code>null</code>，需要在类型后加上<code>?</code>，表示可空</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> aa </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#82AAFF;">say</span><span style="color:#A6ACCD;">(aa)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">say</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> word) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;$</span><span style="color:#A6ACCD;font-style:italic;">word</span><span style="color:#C3E88D;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="异步任务" tabindex="-1">异步任务 <a class="header-anchor" href="#异步任务" aria-label="Permalink to &quot;异步任务&quot;">​</a></h2><p><code>dart</code>中的<code>async/await</code>使用方法和<code>js</code>中基本一致：</p><div class="language-dart"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;dart:io&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 文件读取</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> file </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">File</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;log.txt&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 这个路径是以项目根路径计算的</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;444&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> file</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readAsString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;\${</span><span style="color:#A6ACCD;font-style:italic;">content</span><span style="color:#C3E88D;">}&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;123&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 文件写入</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> logFile </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">File</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;log.txt&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> sink </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> logFile</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">openWrite</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  sink</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&#39;FILE ACCESSED \${</span><span style="color:#FFCB6B;">DateTime</span><span style="color:#C3E88D;">.</span><span style="color:#82AAFF;">now</span><span style="color:#C3E88D;">()}</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> sink</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flush</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> sink</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h1 id="ar-sdk学习了解" tabindex="-1">AR sdk学习了解 <a class="header-anchor" href="#ar-sdk学习了解" aria-label="Permalink to &quot;AR sdk学习了解&quot;">​</a></h1><h2 id="nvidia-cloudxr-sdk" tabindex="-1">NVIDIA CloudXR SDK <a class="header-anchor" href="#nvidia-cloudxr-sdk" aria-label="Permalink to &quot;NVIDIA CloudXR SDK&quot;">​</a></h2><p>NVIDIA CloudXR SDK由服务器驱动程序、客户端SDK和示例客户端应用程序组成。 一端是越来越轻便的终端设备，一端是算力无穷的云，这就是CloudXR的精髓所在。</p><p>服务器驱动程序通过与<code>SteamVR</code>集成，对渲染的帧和系统音频进行编码，并将帧和声音发送给客户端进行解码和显示，从而将<code>OpenVR</code>应用程序中的音频和视频内容提供给客户端。服务器驱动程序还通过使用<code>SteamVR</code>接收来自客户端设备的运动和控制数据，<code>SteamVR</code>作为预构建包提供，并带有自己的安装程序。</p><p>cloudXR平台基于腾讯云的部署和应用：<a href="https://www.zhihu.com/zvideo/1365679354203189248" target="_blank" rel="noreferrer">https://www.zhihu.com/zvideo/1365679354203189248</a></p><h3 id="arkit" tabindex="-1">ARKit <a class="header-anchor" href="#arkit" aria-label="Permalink to &quot;ARKit&quot;">​</a></h3><p>ARKit: ARKit提供的功能总体可以分为三个部分：运动跟踪、场景理解、渲染。 运动跟踪、场景理解上我们无需关注细节，在API层面<code>ARKit</code>中的<code>ARSession</code>给我们提供了打开摄像头去检测、跟踪当前环境(空间、平面、人脸、图片、物体)的能力。严格来讲<code>ARKit</code>并没有渲染的能力，AR的渲染需要依赖其他第三方渲染框架，如<code>3D SceneKit</code>、<code>2D SpriteKit</code>、<code>Metal</code>等。这得益于<code>ARKit</code>提供连续的摄像头图像流，可以方便的对接其他渲染。 ARKit官方文档:<a href="https://developer.apple.com/cn/documentation/arkit/" target="_blank" rel="noreferrer">https://developer.apple.com/cn/documentation/arkit/</a><a href="https://github.com/Wejua/Demos/tree/main/Demos/SubDemos/ARKitDemo" target="_blank" rel="noreferrer">https://github.com/Wejua/Demos/tree/main/Demos/SubDemos/ARKitDemo</a></p><p>ARCore文档：<a href="https://developers.google.com/ar/develop?hl=zh-cn" target="_blank" rel="noreferrer">https://developers.google.com/ar/develop?hl=zh-cn</a></p><h3 id="metal" tabindex="-1">Metal <a class="header-anchor" href="#metal" aria-label="Permalink to &quot;Metal&quot;">​</a></h3><p>官网的开发文档：<a href="https://developer.apple.com/cn/metal/" target="_blank" rel="noreferrer">https://developer.apple.com/cn/metal/</a> 用Metal绘制一个三角形: <a href="https://juejin.cn/post/7215891370890952741?searchId=20231016171400C70564938D162C20BC4F" target="_blank" rel="noreferrer">https://juejin.cn/post/7215891370890952741?searchId=20231016171400C70564938D162C20BC4F</a></p><p>flutter中如何使用ARKit和ARCore来实现一个AR APP的开发</p><p>CloudXR部署：</p><ul><li>安装<code>CloudXR Server</code>，<code>CloudXR-Setup.exe</code>，此软件可在<code>NVIDIA CloudXR</code>网站申请获得</li><li>构建<code>CloudXR PICO</code>客户端，生成<code>apk</code>过程。如果您已获得编译好的<code>apk</code>或<code>PICO</code>设备已安装过了可略过</li><li>从<code>github</code>下载并用<code>Android Studio</code>打开<code>CloudXR_Client_Demo Android</code>工程</li><li>在<code>Android Studio</code>中<code>Build Android</code>工程，生成<code>apk</code>安装包并安装到<code>PICO</code></li><li>创建<code>CloudXRLanchOptions.txt</code>文件,文件内容为: -s &lt;您的电脑的IP地址&gt;</li><li>将<code>CloudXRLanchOptions.txt</code>文件拷贝到<code>PICO</code>硬盘根目录中</li><li>先在电脑上运行<code>SteamVR</code>然后在<code>PICO</code>上运行刚安装的<code>CloudXR</code>客户端软件：<code>nativexr_cloudxr_client_demo</code></li><li><code>PICO</code>自动进入<code>SteamVR</code>界面，无线串流成功</li><li>打开<code>UE5</code>，创建一个<code>Collab Viewer</code>模板工程，构建一个<code>UE5 VR</code>应用程序并通过<code>CloudXR</code>无线串流到<code>PICO</code></li><li>工程打开后启用<code>SteamVR</code>和<code>OpenXR Plugins</code>，然后按要求重启本地<code>UE5</code>项目</li><li>项目重启后可以看到<code>VR Preview</code>功能已开启，确认<code>PICO</code>还在刚才<code>SteamVR</code>的界面，已连接未待机的状态，点击<code>VR Preview</code>运行</li></ul>`,58),e=[p];function t(c,r,C,y,A,D){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
