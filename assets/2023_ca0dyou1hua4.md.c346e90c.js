import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c5c8a48b.js";const A=JSON.parse('{"title":"cad优化","description":"","frontmatter":{},"headers":[],"relativePath":"2023/ca0dyou1hua4.md","filePath":"2023/ca0dyou1hua4.md","lastUpdated":null}'),o={name:"2023/ca0dyou1hua4.md"},p=l(`<h1 id="cad优化" tabindex="-1">cad优化 <a class="header-anchor" href="#cad优化" aria-label="Permalink to &quot;cad优化&quot;">​</a></h1><ul><li>dxf-parse: 从dxf数据中解析最原始的数据出来，然后交给shape-parse层</li><li>shape-parse层拿到原始数据后，将数据区分为: models(普通数据)、insert(insrt、dimension数据) ，同时会将所有的线性类型数据全部转为线段数据，它是一个中间层数据处理</li><li>draw-three 中会先对所有的普通数据合模，然后将insert中的数据进行合模绘制。在具体的合模中还需要根据layer来划分数据合模</li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在合模的方法中，进行绘制前，先使用 three 的 BufferGeometry先进行insert数据的旋转、缩放等处理，处理成positions后，再统一合模</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> mergeGeometry </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BufferGeometry</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (index </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">mergeGeometry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scale</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">800</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">800</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">mergeGeometry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">translate</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1109201.66822111</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">336678.1819667714</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">第283行被执行</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mergeGeometry</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">第283行被执行</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mergeGeometry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">attributes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">position</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 因为要全图纸统一进行绘制，精度只能全图纸统一进行处理了</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> scale</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rotation</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> position </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> groupData</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (scale) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scaleX</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scaleY</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">scaleX</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">scaleY</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">z</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">z</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">scaleX</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">scaleX</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">geometry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scale</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">scaleX</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scaleY</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (rotation) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">z</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">z</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">geometry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rotateZ</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rotation</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PI</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">180</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">geometry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rotateZ</span><span style="color:#F07178;">((</span><span style="color:#A6ACCD;">rotation</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PI</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">180</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (position) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">geometry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">translate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>计算边界的逻辑也可以放到 draw-three 中进行绘制</p><p>包围盒自己实现不了，我无法得到线段什么时候需要闭合，什么时候转弯的时候内圈的线段要比外圈要小 换一种思路：用粗线的线宽来实现这种包围盒效果</p><h3 id="文字优化" tabindex="-1">文字优化 <a class="header-anchor" href="#文字优化" aria-label="Permalink to &quot;文字优化&quot;">​</a></h3><p>为了让文字可以很好的进行各种旋转，一直在用 troika-three-text 在处理Mtext类型的数据，然后这个库绘制文字使用的是纹理绘制，会有很大的性能开销。而three.js官方使用的 FontLoader 加载json字体文件则使用的是文字数据生成geometry来进行绘制。理论上，我们可以制作自己的font字体文件，来满足cad的各种文字需求，并可以通过 geometry 通过合模操作来进行性能优化</p><p>？？？突然发现字体转为json的facetype.js竟然是一个开源的js库，那岂不是还可以更进一步，能根据用户图片中的具体文字内容来生成最简洁的font字体文件 不可行，字体文件必须引入所有文字，因为批注功能需要输入，这就必须有所有文字可供批注添加</p><h3 id="后面的优化方向" tabindex="-1">后面的优化方向 <a class="header-anchor" href="#后面的优化方向" aria-label="Permalink to &quot;后面的优化方向&quot;">​</a></h3><ul><li>使用webworker开多线程进行数据处理的优化、还可以使用wasm方案</li><li>对图纸进行分层加载，避免大图纸加载时间过长</li><li>手绘线的平滑优化，关于批注的移动可以参考three中的 webgl_geometry_spline_editor 案例</li><li>碰撞案例：webgl_mirror</li><li>文字破碎的案例：webgl_modifier_tessellation</li><li>一个页面中渲染多个three内容： webgl_multiple_elements</li><li>多视角渲染的案例：webgl_multiple_views</li><li>飞鸟案例：鸟会根据鼠标位置进行驱散： webgl_gpgpu_birds</li></ul><h3 id="svg的提取尝试" tabindex="-1">svg的提取尝试 <a class="header-anchor" href="#svg的提取尝试" aria-label="Permalink to &quot;svg的提取尝试&quot;">​</a></h3><p>如果可以将正常图片转化为svg格式图片，然后将svg用three.js中的svgloader来加载出来并进行一些数据优化处理，这样就可以通过图片来实现一些thre场景中的数据加载，比如我想在three中绘制一个雾山五行的角色，那我只需要一张图片，然后转为svg，再进行一些处理就可以实现吗？ <a href="https://convertio.co/zh/" target="_blank" rel="noreferrer">https://convertio.co/zh/</a> 这个网站可以将图片转为svg，但是颜色等信息会丢失 有没有一些很好的方法能够将普通图片转化为svg，并且还能保证图片不失真？ html2canvas支持将页面保存为svg图片？</p><p>目前使用文心一言和通义千问都无法直接生成svg格式的图片，先实现通过svg来提取图片中的内容</p><h3 id="cad的内存泄漏问题" tabindex="-1">cad的内存泄漏问题 <a class="header-anchor" href="#cad的内存泄漏问题" aria-label="Permalink to &quot;cad的内存泄漏问题&quot;">​</a></h3><p>因为文字使用了线条来绘制，这样就造成了大量的线条数据，一张文字比较多的图纸，解析下来的数据量有1-2G，这是一个很恐怖的内存问题，导致图纸根据渲染不出来，直接报错：Uncaught (in promise) RangeError: Maximum call stack size exceeded。调用栈溢出，这样就必须要进行内存上的一个优化处理了。</p><p>堆栈溢出：在计算机科学中是指使用过多的存储器时导致调用堆栈产生的溢出。堆栈溢出的产生是由于过多的函数调用，导致使用的调用堆栈大小超过事先规划的大小，覆盖其他存储器内的资料，一般在递归中产生。堆栈溢出很可能由无限递归产生，但也可能仅仅是过多的堆栈层级。</p><p>由于文字转线条绘制的数据量比较大，大概一个数组的长度如果超过4千万，浏览器就会报错。</p><p>这次堆栈溢出的原因是：我用了多次数组结构出现了堆栈溢出，实际场景的代码比较复杂，后续尝试简单复现却并没有将问题复现出来。尝试复现的代码如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> position </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            index</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123123</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            index</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">adfsasf</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    ]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">aa</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">aa</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">bb</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(position)</span></span></code></pre></div><h3 id="事件执行顺序优化" tabindex="-1">事件执行顺序优化 <a class="header-anchor" href="#事件执行顺序优化" aria-label="Permalink to &quot;事件执行顺序优化&quot;">​</a></h3><p>pointermove 事件会比 mousemove 事件先执行 首先，事件是可以注册多个的，你在这个地方注册一个 mousedown ，另一个地方再注册一个 mousedown 事件，两个事件的函数都会执行</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// TODO:如果一个项目中同时存在各种事件同时需要触发执行，有有没有一个事件处理机制来统一规范的对触发事件进行控制？这个后续需要进一步学习</span></span></code></pre></div><p>bimface的cad图纸加载图纸消耗的内存很少，但是却能够实现很多文字的拾取效果，这些应该是需要结合着色器的语法才能实现 必须要自己写着色器来进行代码优化，不然内存消耗太大会导致很多问题</p><h3 id="three中是如何绘制出line2的-它的底层原理是什么" tabindex="-1">three中是如何绘制出line2的，它的底层原理是什么 <a class="header-anchor" href="#three中是如何绘制出line2的-它的底层原理是什么" aria-label="Permalink to &quot;three中是如何绘制出line2的，它的底层原理是什么&quot;">​</a></h3><p>在webgl中，绘制线条时，默认情况下线条宽度是1个像素，它的宽度是固定的。然而，Line2通过使用自定义着色器(shader)以及额外的技术，使得线条宽度可以在像素级别进行调整。 Line2的底层原理包括以下重要步骤： 1，自定义着色器： Line2使用自定义的着色器程序来渲染线条。着色器是一种运行在GPU上的小型程序，通过对顶点和片元进行操作来定义对象的外观。 2，顶点扩展： 线条的原始定义可能只包含线条的起点和终点，而宽线需要顶点的多个副本以形成线条的宽度。使用顶点扩展技术，线条的起点和终点会在GPU上复制多次，并附加一些额外的属性。 3，定点属性计算：在顶点扩展的基础上，每个顶点需要计算一些属性，例如顶点的位置、法线、纹理坐标等。这些属性将用于之后的绘制和着色过程。 4，连接线段：通过使用额外的定点属性，将相邻的定点连接起来形成线段。同时，根据线条宽度，调整定点位置以形成宽线的外观。 5，着色和渲染：基于给定的材质和光照模型，使用自定义着色器对线条进行着色，并最终将结果渲染到屏幕上。</p><p>总的来说，Line2通过使用顶点扩展、顶点属性计算、连接线段以及自定义着色器等技术，实现了绘制出宽线的功能。</p><h3 id="图层数据收集过程中的数据数据污染问题" tabindex="-1">图层数据收集过程中的数据数据污染问题 <a class="header-anchor" href="#图层数据收集过程中的数据数据污染问题" aria-label="Permalink to &quot;图层数据收集过程中的数据数据污染问题&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">collectPositionBylayer[item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">layer] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">positions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> offsetPositionData</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">colors</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ItemColors</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">pickColors</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ItemPickColors</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>一开始我的图层position数据收集是这样写的，因为这里是直接将<code>offsetPositionData</code>赋值给<code>collectPositionBylayer[item.layer].positions</code>。导致本次循环的<code>offsetPositionData</code>临时变量不会被释放，这样后续相同图层的数据会push到<code>collectPositionBylayer[item.layer].positions</code>中，也就相当于修改了未释放的<code>offsetPositionData</code>的值，这样就影响到了其他收集到<code>offsetPositionData</code>变量的数据，造成了数据污染。</p><p>调整为如下收集即可解决：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">collectPositionBylayer[item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">layer] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">positions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">offsetPositionData]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">colors</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">ItemColors]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">pickColors</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">ItemPickColors]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="用贝塞尔曲线来优化cad的手绘线批注" tabindex="-1">用贝塞尔曲线来优化cad的手绘线批注 <a class="header-anchor" href="#用贝塞尔曲线来优化cad的手绘线批注" aria-label="Permalink to &quot;用贝塞尔曲线来优化cad的手绘线批注&quot;">​</a></h3><p>贝塞尔曲线根据控制点的数量分为：</p><ul><li>一阶贝塞尔曲线（2个控制点）</li><li>二阶贝塞尔曲线（3个控制点）</li><li>三阶贝塞尔曲线（4个控制点）</li><li>n阶贝塞尔曲线（n+1个控制点）</li></ul><p>通过控制点是怎么绘制出贝塞尔曲线的呢？ 这里以三阶贝塞尔曲线为例：四个控制点通过先后顺序进行连接，形成三条线段，通过一个参数t，其中 t ∈ [0, 1]，该参数的值等于线段上某一个点距离起点的长度除以线段长度。 接下来对每一条线段做同样的操作，得到三个控制点； 然后对三个控制点重复操作，得到两个控制点； 最后再用同样的方法可以得到最终的一个点，这个点就是贝塞尔曲线上的一个点。 通过控制t的值，由0增加至1，就绘制出了一条由起点至终点的贝塞尔曲线。</p><p>css动画中使用的贝塞尔曲线其实是三次贝塞尔曲线</p><p>three中有现成的贝塞尔曲线的方法封装: CubicBezierCurve3，除了贝塞尔曲线，three中还有 CatmullRomCurve3 可以用来绘制平滑曲线，它的实现原理是：Catmull-Rom算法</p><p><code>cubic-bezier()</code>函数定义了一个三次贝塞尔曲线。三次贝塞尔曲线通过四个点：P0、P1、P2、P3来定义。P0和P3是曲线的起点和终点，在css中起点和终点都是固定的，P0是(0, 0)，表示起始时间或位置以及初始状态，P3是(1, 1)表示最终时间或位置以及最终状态。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// x1和y1定义了P1点的横纵坐标，x2和y2定义了P2点的横纵坐标。其中x1和x2的范围必须在[0, 1]区间内，否则这个曲线就是无效的</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// css中如果声明了无效的三次贝塞尔曲线，那么整个属性的声明都会被无视</span></span>
<span class="line"><span style="color:#A6ACCD;">cubic</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">bezier</span><span style="color:#A6ACCD;">(x1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> x2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y2)</span></span></code></pre></div><p>使用three中的<code>CubicBezierCurve3</code>实现css中的动画效果的贝塞尔曲线绘制：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// const curve = new THREE.CubicBezierCurve3(</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(0, 0, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(7.5, 75, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(87.5, 36, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(100, 100, 0)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// css中的ease的贝塞尔曲线：cubic-bezier(0.25, 0.1, 0.25, 1.0)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const curve = new THREE.CubicBezierCurve3(</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(0, 0, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(25, 10, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(25, 100, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(100, 100, 0)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// css中的ease-in的贝塞尔曲线：cubic-bezier(0.42, 0.0, 1.0, 1.0)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const curve = new THREE.CubicBezierCurve3(</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(0, 0, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(42, 0, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(100, 100, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(100, 100, 0)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// css中的ease-out的贝塞尔曲线：cubic-bezier(0.0, 0.0, 0.58, 1.0)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const curve = new THREE.CubicBezierCurve3(</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(0, 0, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(0, 0, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(58, 100, 0),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     new THREE.Vector3(100, 100, 0)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// css中的ease-in-out的贝塞尔曲线：cubic-bezier(0.42, 0.0, 0.58, 1.0)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> curve </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CubicBezierCurve3</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vector3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vector3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vector3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">58</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vector3</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> points </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> curve</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPoints</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">50</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> geometry </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BufferGeometry</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setFromPoints</span><span style="color:#A6ACCD;">(points)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> material </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">LineBasicMaterial</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xff0000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> curveObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Line</span><span style="color:#A6ACCD;">(geometry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> material)</span></span>
<span class="line"><span style="color:#A6ACCD;">scene</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(curveObject)</span></span></code></pre></div><p>在两点之间找两个控制点，用贝塞尔曲线再次将随机点连起来，这样就能得到一条平滑的曲线。比如P0和P3的需要连接的起始点和终点，P1和P2是需要添加的控制点。那么P1需要添加在P0右侧，并且与P0的y相同；P2需要添加在P3左侧，与P3的y相同。这样就能在P0和P3之间得到一条平滑的曲线</p>`,43),e=[p];function t(c,r,y,F,D,i){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
